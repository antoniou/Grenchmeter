#!/usr/bin/python

""" Utilities for generating Condor DAGMan input files. """

#TODO recheck this!
__proggy = "WFDAGMan";
__rev = "0.1";
__proggy_stamp__ = "%s v%s" % (__proggy, __rev);
__author__ = 'Corina Stratan';
__email__ = 'corina at cs.pub.ro';
__file__ = 'WFDAGMan.py';
__version__ = '$Rev: %s$' % __rev;
__date__ = "$Date: 2007/03/15 14:19:35 $"
__copyright__ = "Copyright (c) 2005 Alexandru IOSUP"
__license__ = "Python"

#---------------------------------------------------
# Log:
# 15/03/2007 C.S. 0.1  Started this module
#---------------------------------------------------

import sys
if "utils" not in sys.path:
    sys.path.append("utils")
import WLCompositeGenGraphs
import traceback
import time
import string

### from http://www.python.org/doc/current/tut/node10.html#SECTION0010400000000000000000
###      section 8.5 user-defined exceptions, Python Tutorial
class MyError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

#class WFDAGMan():
#    def __init__(self, outfile):

#       self.outfile = outfile

def saveToDAGMan(CompGraph, DAGFileName, ParamsDic):
        print "STATUS! Saving to Condor DAGMan file %s ..." % DAGFileName
        
        #TODO corina maybe remove this:
        try:

            CompGraph.GraphName = ParamsDic['GraphName']
        except:
            GraphName = "aaa"
        
        try:
            Comment = ParamsDic['Comment']
        except:
            Comment = "%s: %s" % (CompGraph.GraphID, CompGraph.GraphName)

        print("### graph id: %s " % CompGraph.GraphID)
        OutFile = open(DAGFileName, "wt")
        OutFile.write('# graph generated by GenGraphs.py by Alexandru Iosup, on %s \n' % time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()))
        OutFile.write('# Info: %s \n' % Comment)

        SubUnit = ParamsDic
        #-- generate jobs, one by one -> this allows setting the right parameters for file dependencies support
        #SubUnit['unit'] = {}
        #SubUnit['unit']['info'] = {}
        #SubUnit['unit']['jobs'] = {}
        NJobsToGenerate = SubUnit['.NJobsToGenerate']
        print("[WFDAGMan.py] number of jobs to generate: %s " % NJobsToGenerate)

        for i in xrange(CompGraph.NTasks):
            Name = 'j%d' % i
	    ActualJDF = SubUnit['unit']['info'][i]['jdf'].replace('jdfs','jdfs-condor')
            OutFile.write('Job %s \t %s\n' % (Name, ActualJDF) )

        # write edges
        for i in xrange(CompGraph.NTasks):
            if i not in CompGraph.TaskEdges: continue
            NameI = 'j%d' % i
            LineStarted = 0
            for j in xrange(CompGraph.NTasks):
                if j not in CompGraph.TaskEdges[i]: continue
                if CompGraph.TaskEdges[i][j]:
                    if LineStarted == 0:
                         OutFile.write('PARENT %s CHILD ' % NameI)
                         LineStarted = 1
                    NameJ = 'j%d' % j
                    #OutFile.write('\tTask%d -> Task%d [style=dotted,color="%.3f %.3f %.3f"]\n' % \
                    OutFile.write('%s ' % (NameJ) )
            OutFile.write('\n')
            

        OutFile.close()
        
