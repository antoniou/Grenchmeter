#!/usr/bin/python

""" Utilities for generating Karajan input files. """

#TODO recheck this!
__proggy = "WFKarajan";
__rev = "0.1";
__proggy_stamp__ = "%s v%s" % (__proggy, __rev);
__author__ = 'Corina Stratan';
__email__ = 'corina at cs.pub.ro';
__file__ = 'WFKarajan.py';
__version__ = '$Rev: %s$' % __rev;
__date__ = "$Date: 2007/03/15 14:19:35 $"
__copyright__ = "Copyright (c) 2005 Alexandru IOSUP"
__license__ = "Python"

#---------------------------------------------------
# Log:
# 23/03/2008 C.S. 0.1  Started this module
#---------------------------------------------------

import sys
if "utils" not in sys.path:
    sys.path.append("utils")
import WLCompositeGenGraphs
import traceback
import time
import string

### from http://www.python.org/doc/current/tut/node10.html#SECTION0010400000000000000000
###      section 8.5 user-defined exceptions, Python Tutorial
class MyError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

#class WFDAGMan():
#    def __init__(self, outfile):

#       self.outfile = outfile

def saveToKarajan(CompGraph, DAGFileName, ParamsDic):
        GeneratorCmdMap = {'gt4condor-jdf':'Condor', 'gt4sge-jdf':'SGE'}
        print "STATUS! Saving to Karajan file %s ..." % DAGFileName
        
        #TODO corina maybe remove this:
        try:

            CompGraph.GraphName = ParamsDic['GraphName']
        except:
            GraphName = "aaa"
        
        try:
            Comment = ParamsDic['Comment']
        except:
            Comment = "%s: %s" % (CompGraph.GraphID, CompGraph.GraphName)

        #print("### graph id: %s " % CompGraph.GraphID)
        OutFile = open(DAGFileName, "wt")
        OutFile.write('<!-- graph generated by GenGraphs.py by Alexandru Iosup, on %s --> \n' % time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()))
        OutFile.write('<!-- Info: %s --> \n' % Comment)

        SubUnit = ParamsDic
        #print "### [saveToKarajan] Using JDFGenerator: ", SubUnit['JDFGeneratorName']
        #-- generate jobs, one by one -> this allows setting the right parameters for file dependencies support
        #SubUnit['unit'] = {}
        #SubUnit['unit']['info'] = {}
        #SubUnit['unit']['jobs'] = {}
        NJobsToGenerate = SubUnit['.NJobsToGenerate']
        print("[WFKarajan.py] number of jobs to generate: %s " % NJobsToGenerate)
        
        OutFile.write('<project> \n <include file=\"cogkit.k\"/> \n <include file="dag.k"/> \n')
        OutFile.write('<discard> \n <dag> \n')
        
        # write nodes -- simple
        for i in xrange(CompGraph.NTasks):
            OutFile.write('\t<node> \n')
            Name = 'j%d' % i
            OutFile.write('\t\t<string>%s</string> \n' % Name)
            OutFile.write('\t\t<element> <quotedlist/> \n')
            ExecutableString = '\t\t\t<execute executable=\"globusrun-ws\" arguments=\"-submit -Ft %s -f %s\" provider=\"local\"> </execute> \n' % (GeneratorCmdMap[SubUnit['JDFGeneratorName']],SubUnit['unit']['info'][i]['jdf'])
            ResManagerName = SubUnit['JDFGeneratorName'].replace('-jdf', '')            
            DirName = "jdfs-%s" % ResManagerName
            ActualExecutable = ExecutableString.replace('jdfs', DirName)
            OutFile.write(ActualExecutable)
            #OutFile.write('Job %s \t %s\n' % (Name, SubUnit['unit']['info'][i]['jdf']) )
            OutFile.write('\t\t</element> \n\t\t<edges>\n')
            
            for j in xrange(CompGraph.NTasks):
                if j not in CompGraph.TaskEdges[i]: continue
                if CompGraph.TaskEdges[i][j]:
                    NameJ = 'j%d' % j
                    OutFile.write('\t\t\t<string>%s</string>\n' % NameJ)
            OutFile.write('\t\t</edges> \n\t</node> \n')
            
        OutFile.write('</dag> \n</discard> \n</project>')
        OutFile.close()
        
